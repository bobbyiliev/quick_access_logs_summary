#!/bin/bash

##
# 2018 Bobby I. <bobby@bobbyiliev.com>
# Script that summarizes your access logs
# This includes:
# - POST requests
# - GET requests
# - IP logs and their geo location
##

########################
### Color  Variables ###
########################

# Check if the terminal supports colors
if [ -t 1 ]; then
	# Terminal supports colors
	green='\033[32m'
	blue='\033[34m'
	clear='\033[0m'
	orange='\033[33m'
	red='\033[31m'
else
	# Terminal doesn't support colors, use empty strings
	green=''
	blue=''
	clear=''
	orange=''
	red=''
fi

#########################
###  Color Functions  ###
#########################

ColorGreen() {
	printf "${green}%s${clear}\n" "$1"
}

ColorBlue() {
	printf "${blue}%s${clear}\n" "$1"
}

ColorRed() {
	printf "${red}%s${clear}\n" "$1"
}

ColorOrange() {
	printf "${orange}%s${clear}\n" "$1"
}

###########################################################################
## GeoIP domain                                                          ##
## Uses our own GEO location API script to get the country code of an IP ##
## The connection goes though HTTPS                                      ##
## To disable the GEO location check set the value to 0                  ##
###########################################################################

geoipdomain="https://bobbyiliev.com/ip.php"

#################
## Apache logs ##
#################

function access_log_summary() {
	log="$1"

	if [[ -f "$log" ]]; then
		if [[ $(cat "$log" 2>/dev/null | wc -l) -lt 1 ]]; then
			# Empty log
			ColorOrange "    Empty log or does not exist"
			ColorGreen "    Specify the log file that you want to summarize"
			ColorOrange "    Example:"
			ColorOrange "        ./spike_check your_log"
			exit 1
		else
			# Log exists and is not empty
			ColorOrange "Summarizing log.."
			ColorOrange "This might take a while depending on the size of the log"

			ColorGreen "Top 20 GET requests: "
			echo
			cat "$log" 2>/dev/null | grep -v 'ftp.' | grep GET | cut -d\" -f2 | awk '{print $1 " " $2}' | cut -d? -f1 | sort | uniq -c | sort -n | sed 's/[ ]*//' | tail -20 | sed 's/^ *//g' | column -s '' -s ' ' -t
			echo

			ColorGreen "Most Recent top 20 GET requests: "
			echo
			tail -n 1000 "$log" 2>/dev/null | grep -v 'ftp.' | grep GET | cut -d\" -f2 | awk '{print $1 " " $2}' | cut -d? -f1 | sort | uniq -c | sort -n | sed 's/[ ]*//' | tail -20 | sed 's/^ *//g' | column -s '' -s ' ' -t
			echo

			ColorGreen "Top 20 POST requests for: "
			echo
			cat "$log" 2>/dev/null | grep -v 'ftp.' | grep POST | cut -d\" -f2 | awk '{print $1 " " $2}' | cut -d? -f1 | sort | uniq -c | sort -n | sed 's/[ ]*//' | tail -20 | sed 's/^ *//g' | column -s '' -s ' ' -t
			echo

			ColorGreen "Most Recent top 20 POST requests: "
			echo
			tail -n 1000 "$log" 2>/dev/null | grep -v 'ftp.' | grep POST | cut -d\" -f2 | awk '{print $1 " " $2}' | cut -d? -f1 | sort | uniq -c | sort -n | sed 's/[ ]*//' | tail -20 | sed 's/^ *//g' | column -s '' -s ' ' -t
			echo

			ColorGreen "Top 20 IP addresses that have been accessing your site: "
			echo

			# Ask if we should check the GEO location
			read -r geo

			# If yes, check the GEO location
			if [[ "$geo" == "y" || "$geo" == "Y" || "$geo" == "yes" || "$geo" == "Yes" ]]; then
				for ips in $(cat "$log" 2>/dev/null | awk '{print $1}' | sort | uniq -c | sort -rn | head -20 | sed 's/^ *//g' | column -s '' -s ' ' -t); do
					# Split the string into an array
					read -ra array <<<"$ips"
					hits="${array[0]}"
					ip="${array[1]}"

					if [[ "$ip" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
						location=$(curl "${geoipdomain}?ip=${ip}" 2>/dev/null)
						echo "$hits" - "$ip" - "$location" | sed 's/^ *//g' | column -s '-' -t
					fi
				done
			else
				# If no, just show the IPs
				cat "$log" 2>/dev/null | awk '{print $1}' | sort | uniq -c | sort -rn | head -20 | sed 's/^ *//g' | column -s ' ' -s ' ' -t
			fi

			ColorGreen "Most Recent top 20 IP addresses: "
			echo

			# Ask if we should check the GEO location
			if [[ "$geo" == "y" || "$geo" == "Y" || "$geo" == "yes" || "$geo" == "Yes" ]]; then
				for ips in $(tail -n 1000 "$log" 2>/dev/null | awk '{print $1}' | sort | uniq -c | sort -rn | head -20 | sed 's/^ *//g' | column -s '' -s ' ' -t); do
					# Split the string into an array
					read -ra array <<<"$ips"
					hits="${array[0]}"
					ip="${array[1]}"

					if [[ "$ip" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
						location=$(curl "${geoipdomain}?ip=${ip}" 2>/dev/null)
						echo "$hits" - "$ip" - "$location" | sed 's/^ *//g' | column -s '-' -t
					fi
				done
			else
				# If no, just show the IPs
				tail -n 1000 "$log" 2>/dev/null | awk '{print $1}' | sort | uniq -c | sort -rn | head -20 | sed 's/^ *//g' | column -s '' -s ' ' -t
			fi
		fi
	else
		ColorGreen "No log found.."
	fi

	ColorRed "########## END log ###########"
}

# If no arguments are provided, show the help message
if [[ $# -eq 0 ]]; then
    echo ""
	ColorGreen "    This script summarizes your access logs, optimized for Apache"
	echo
	ColorGreen "    Specify the log that you want to summarize.."
	ColorOrange "    Example:"
	ColorOrange "        ./spike_check your_log"
    echo ""
else
	# If arguments are provided, run the script
	access_log_summary "$1"
fi
